name: Build, Check, and Release

permissions:
  contents: write
  packages: write
  id-token: write

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:

jobs:
  test_integration:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["3.9","3.10","3.11","3.12","3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/python-poetry
        with:
          python: ${{ matrix.python }}
          pytest-path: tests/integration

  build:
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    needs:
      - test_integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.9 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: pip
          cache-dependency-path: |
            **/pyproject.toml
            **/poetry.lock
            **/requirements*.txt

      - name: Build distribution
        shell: bash
        run: |
          chmod +x setup.sh
          ./setup.sh
          source .venv/bin/activate
          python -m pip uninstall -y pychub-hatch-plugin pychub-pdm-plugin pychub-poetry-plugin || true
          poetry env use system
          for sp in hatch pdm poetry; do
            pushd "$sp"
            poetry build -o ../dist/
            popd
          done

      - id: get_version
        name: Extract version from wheels
        shell: bash
        run: |
          python - <<'PY'
          import os, re, sys, pathlib
          dist = pathlib.Path("dist")
          wheels = sorted(dist.glob("pychub_hatch_plugin-*.whl"))
          if not wheels:
              print("No hatch plugin wheel found in dist/", file=sys.stderr)
              sys.exit(1)
          whl = wheels[0]
          m = re.search(r"pychub_hatch_plugin-([0-9]+\.[0-9]+\.[0-9]+)-", whl.name)
          if not m:
              print(f"Cannot parse MAJOR.MINOR.PATCH from {whl.name}", file=sys.stderr)
              sys.exit(1)
          ver = m.group(1)
          print("Detected version:", ver)
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"version={ver}\n")
          PY

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  check:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with: { name: dist, path: dist }
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Twine check
        run: |
          python -m pip install -U pip twine
          twine check dist/*

  publish_test_pypi:
    outputs:
      published: ${{ (steps.upload.conclusion == 'success') && 'true' || 'false' }}
    needs: [check]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main'
    environment: pypi
    steps:
      - uses: actions/download-artifact@v4
        with: { name: dist, path: dist }
      - name: Publish to TestPyPI
        id: upload
        if: github.ref == 'refs/heads/main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TESTPYPI_ACCOUNT_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          skip-existing: true

  publish:
    outputs:
      published: ${{ (steps.upload.conclusion == 'success') && 'true' || 'false' }}
    needs: [check]
    runs-on: ubuntu-latest
    if: |
      startsWith(github.ref, 'refs/tags/')
    environment: pypi
    steps:
      - uses: actions/download-artifact@v4
        with: { name: dist, path: dist }
      - name: Publish to PyPI
        id: upload
        if: startsWith(github.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_ACCOUNT_TOKEN }}
          packages-dir: dist
          skip-existing: true

      # --- GitHub Release (only on tags) ---
      - name: Create GitHub Release and upload wheel
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*

  post-publish-smoke-test-testpypi:
    needs: [build, publish_test_pypi]
    if: ${{ always() && (needs.publish_test_pypi.outputs.published == 'true') }}
    runs-on: ubuntu-latest
    env:
      VER: ${{ needs.build.outputs.version }}
    steps:
      - name: Wait for TestPyPI to serve $VER
        shell: bash
        run: |
          set -euo pipefail
          base="https://test.pypi.org/pypi"
          pkgs=(pychub-hatch-plugin pychub-pdm-plugin pychub-poetry-plugin)
          for attempt in {1..30}; do
            missing=()
            for p in "${pkgs[@]}"; do
              page="$(curl -fsS -H 'Cache-Control: no-cache' -H 'Pragma: no-cache' "$base/$p/")"
              if ! grep -E "(${p//-/_}|${p//_/-})-${VER}(-|%2B).*\.whl" <<<"$page" >/dev/null; then
                missing+=("$p")
              fi
            done
            if [ ${#missing[@]} -eq 0 ]; then
              echo "All packages for $VER visible on TestPyPI"
              break
            fi
            echo "Waiting for: ${missing[*]} (attempt $attempt/30)"; sleep 5
          done
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install from index and assert entrypoints
        shell: bash
        run: |
          python -m venv .v && source .v/bin/activate
          python -m pip install -U pip
          python -m pip install --no-cache-dir \
            --index-url https://test.pypi.org/simple/ \
            --extra-index-url https://pypi.org/simple/ \
            "pychub-hatch-plugin==$VER" \
            "pychub-pdm-plugin==$VER" \
            "pychub-poetry-plugin==$VER"
          python - <<'PY'
          from importlib.metadata import entry_points
          eps = entry_points()
          ep_map: dict[str, tuple[str, str]] = {
              "hatch": ("pychub", "hatch"),
              "pdm": ("pychub", "pdm.build.hook"),
              "poetry": ("pychub-poetry-plugin", "poetry.application.plugin")
          }
          for build_tool, (ep_name, group) in ep_map.items():
              assert any(ep.name == ep_name for ep in eps.select(group=group)), f"{build_tool} hook missing"
          print("Post-publishing verification OK")
          PY

  post-publish-smoke-test-pypi:
    needs: [build, publish]
    if: ${{ always() && (needs.publish.outputs.published == 'true') }}
    runs-on: ubuntu-latest
    env:
      VER: ${{ needs.build.outputs.version }}
    steps:
      - name: Wait for PyPI to serve $VER
        shell: bash
        run: |
          set -euo pipefail
          base="https://pypi.org/pypi"
          pkgs=(pychub-hatch-plugin pychub-pdm-plugin pychub-poetry-plugin)
          for attempt in {1..30}; do
            missing=()
            for p in "${pkgs[@]}"; do
              page="$(curl -fsS -H 'Cache-Control: no-cache' -H 'Pragma: no-cache' "$base/$p/")"
              if ! grep -E "(${p//-/_}|${p//_/-})-${VER}(-|%2B).*\.whl" <<<"$page" >/dev/null; then
                missing+=("$p")
              fi
            done
            if [ ${#missing[@]} -eq 0 ]; then
              echo "All packages for $VER visible on PyPI"
              break
            fi
            echo "Waiting for: ${missing[*]} (attempt $attempt/30)"; sleep 5
          done
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install from index and assert entrypoints
        shell: bash
        run: |
          python -m venv .v && source .v/bin/activate
          python -m pip install -U pip
          python -m pip install --no-cache-dir \
            --index-url https://pypi.org/simple/ \
            "pychub-hatch-plugin==$VER" \
            "pychub-pdm-plugin==$VER" \
            "pychub-poetry-plugin==$VER"
          python - <<'PY'
          from importlib.metadata import entry_points
          eps = entry_points()
          ep_map: dict[str, tuple[str, str]] = {
              "hatch": ("pychub", "hatch"),
              "pdm": ("pychub", "pdm.build.hook"),
              "poetry": ("pychub-poetry-plugin", "poetry.application.plugin")
          }
          for build_tool, (ep_name, group) in ep_map.items():
              assert any(ep.name == ep_name for ep in eps.select(group=group)), f"{build_tool} hook missing"
          print("Post-publishing verification OK")
          PY
